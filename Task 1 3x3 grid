import numpy as np
puzzle = np.array([
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
])
def solve_sudoku(puzzle):
    # Find an empty cell
    for i in range(9):
        for j in range(9):
            if puzzle[i][j] == 0:
                # Try each possible value in the cell
                for k in range(1, 10):
                    if is_valid(puzzle, i, j, k):
                        puzzle[i][j] = k
                        if solve_sudoku(puzzle):
                            return True
                        puzzle[i][j] = 0
                return False
    return True
def is_valid(puzzle, row, col, value):
    # Check row
    if value in puzzle[row]:
        return False

    # Check column
    if value in puzzle[:,col]:
        return False

    # Check subgrid
    subgrid_row = (row // 3) * 3
    subgrid_col = (col // 3) * 3
    subgrid = puzzle[subgrid_row:subgrid_row+3, subgrid_col:subgrid_col+3]
    if value in subgrid:
        return False

    return True
# Call the solve_sudoku function
if solve_sudoku(puzzle):
    print("Sudoku solved!")
    print(puzzle)
else:
    print("Unable to solve the Sudoku puzzle.")
