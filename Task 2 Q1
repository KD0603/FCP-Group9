import numpy as np

puzzle = np.array([
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
])

row_sol = int(input('The row to solve:'))
col_sol = int(input('The column to solve:'))

def possible_values(puzzle, row, col):
    if puzzle[row][col] != 0:
        return [puzzle[row][col]]

    values = set(range(1, row_sol*col_sol+1))
    values -= set(puzzle[row,:])   # Check row
    values -= set(puzzle[:,col])   # Check column

    # Check subgrid
    subgrid_row = (row // row_sol) * row_sol
    subgrid_col = (col // col_sol) * col_sol
    subgrid = puzzle[subgrid_row:subgrid_row+row_sol, subgrid_col:subgrid_col+col_sol]
    values -= set(subgrid.flatten())

    return list(sorted(values))

def solve_sudoku(puzzle):
    while True:
        updated = False
        # Wavefront propagation
        for i in range(row_sol*col_sol):
            for j in range(row_sol*col_sol):
                if puzzle[i][j] == 0:
                    values = possible_values(puzzle, i, j)
                    if len(values) == 1:
                        puzzle[i][j] = values[0]
                        updated = True
        if not updated:
            break

    return puzzle

def print_puzzle(puzzle):
    for i in range(row_sol*col_sol):
        for j in range(row_sol*col_sol):
            if puzzle[i][j] == 0:
                values = possible_values(puzzle, i, j)
                print(values, end=' ')
            else:
                print(puzzle[i][j], end=' ')
        print()

def print_solution(puzzle):
    print("Solution:")
    for i in range(row_sol*col_sol):
        for j in range(row_sol*col_sol):
            print(puzzle[i][j], end=' ')
        print()

solved_puzzle = solve_sudoku(puzzle)
print_puzzle(solved_puzzle)
print_solution(solved_puzzle)
